#!/bin/bash

# =============================================================================\n# Torch Fellowship Backend - EC2 Deployment Script\n# =============================================================================\n#\n# This script automates the deployment process for the Torch Fellowship backend\n# on an Amazon EC2 instance.\n#\n# Prerequisites:\n# - EC2 instance with Ubuntu 20.04+ or Amazon Linux 2\n# - SSH access to the instance\n# - Domain name configured (optional)\n#\n# =============================================================================\n\nset -e  # Exit on any error\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Configuration\nAPP_NAME=\"torch-fellowship-backend\"\nAPP_DIR=\"/home/ubuntu/$APP_NAME\"\nNODE_VERSION=\"18\"\nPM2_ECOSYSTEM=\"ecosystem.config.js\"\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Function to check if command exists\ncommand_exists() {\n    command -v \"$1\" >/dev/null 2>&1\n}\n\n# Function to install Node.js\ninstall_nodejs() {\n    print_status \"Installing Node.js v$NODE_VERSION...\"\n    \n    # Install Node.js via NodeSource repository\n    curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | sudo -E bash -\n    sudo apt-get install -y nodejs\n    \n    # Verify installation\n    node_version=$(node --version)\n    npm_version=$(npm --version)\n    \n    print_success \"Node.js $node_version and npm $npm_version installed successfully\"\n}\n\n# Function to install PM2 globally\ninstall_pm2() {\n    print_status \"Installing PM2 process manager...\"\n    sudo npm install -g pm2\n    \n    # Configure PM2 to start on boot\n    sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u ubuntu --hp /home/ubuntu\n    \n    print_success \"PM2 installed and configured for startup\"\n}\n\n# Function to install Nginx (optional)\ninstall_nginx() {\n    print_status \"Installing and configuring Nginx...\"\n    \n    sudo apt update\n    sudo apt install -y nginx\n    \n    # Enable and start Nginx\n    sudo systemctl enable nginx\n    sudo systemctl start nginx\n    \n    print_success \"Nginx installed and started\"\n}\n\n# Function to configure firewall\nconfigure_firewall() {\n    print_status \"Configuring UFW firewall...\"\n    \n    # Enable UFW\n    sudo ufw --force enable\n    \n    # Allow SSH\n    sudo ufw allow ssh\n    \n    # Allow HTTP and HTTPS\n    sudo ufw allow 80\n    sudo ufw allow 443\n    \n    # Allow application port\n    sudo ufw allow 5000\n    \n    # Show status\n    sudo ufw status\n    \n    print_success \"Firewall configured\"\n}\n\n# Function to create application directory\nsetup_app_directory() {\n    print_status \"Setting up application directory...\"\n    \n    # Create directory if it doesn't exist\n    mkdir -p $APP_DIR\n    \n    # Change to app directory\n    cd $APP_DIR\n    \n    print_success \"Application directory created at $APP_DIR\"\n}\n\n# Function to clone repository\nclone_repository() {\n    local repo_url=$1\n    \n    if [ -z \"$repo_url\" ]; then\n        print_error \"Repository URL not provided\"\n        exit 1\n    fi\n    \n    print_status \"Cloning repository from $repo_url...\"\n    \n    # Remove existing directory if it exists\n    if [ -d \"$APP_DIR/.git\" ]; then\n        print_warning \"Existing repository found, pulling latest changes...\"\n        cd $APP_DIR\n        git pull origin main\n    else\n        # Clone the repository\n        git clone $repo_url $APP_DIR\n        cd $APP_DIR\n    fi\n    \n    print_success \"Repository cloned/updated successfully\"\n}\n\n# Function to install dependencies\ninstall_dependencies() {\n    print_status \"Installing application dependencies...\"\n    \n    cd $APP_DIR\n    npm ci --production\n    \n    print_success \"Dependencies installed successfully\"\n}\n\n# Function to setup environment variables\nsetup_environment() {\n    print_status \"Setting up environment variables...\"\n    \n    # Copy production environment template\n    if [ -f \".env.production.template\" ]; then\n        cp .env.production.template .env\n        print_warning \"Environment file created from template. Please update with actual values!\"\n        print_warning \"Edit .env file with your production configuration:\"\n        print_warning \"  - MongoDB connection string\"\n        print_warning \"  - JWT secret\"\n        print_warning \"  - API keys\"\n        print_warning \"  - Domain configuration\"\n    else\n        print_error \"Production environment template not found!\"\n        print_warning \"Please create .env file manually with production values\"\n    fi\n}\n\n# Function to create logs directory\nsetup_logs() {\n    print_status \"Setting up logs directory...\"\n    \n    mkdir -p $APP_DIR/logs\n    \n    # Set proper permissions\n    chmod 755 $APP_DIR/logs\n    \n    print_success \"Logs directory created\"\n}\n\n# Function to start application with PM2\nstart_application() {\n    print_status \"Starting application with PM2...\"\n    \n    cd $APP_DIR\n    \n    # Stop existing instance if running\n    pm2 stop $APP_NAME 2>/dev/null || true\n    pm2 delete $APP_NAME 2>/dev/null || true\n    \n    # Start with ecosystem file\n    pm2 start $PM2_ECOSYSTEM --env production\n    \n    # Save PM2 configuration\n    pm2 save\n    \n    print_success \"Application started with PM2\"\n    \n    # Show PM2 status\n    pm2 status\n    pm2 logs $APP_NAME --lines 10\n}\n\n# Function to configure Nginx reverse proxy\nconfigure_nginx_proxy() {\n    local domain=$1\n    \n    if [ -z \"$domain\" ]; then\n        print_warning \"No domain provided, skipping Nginx configuration\"\n        return\n    fi\n    \n    print_status \"Configuring Nginx reverse proxy for $domain...\"\n    \n    # Create Nginx configuration\n    sudo tee /etc/nginx/sites-available/$APP_NAME > /dev/null <<EOF\nserver {\n    listen 80;\n    server_name $domain www.$domain;\n    \n    # Security headers\n    add_header X-Frame-Options DENY;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection \"1; mode=block\";\n    \n    # Proxy to Node.js application\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_cache_bypass \\$http_upgrade;\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n    \n    # Health check endpoint\n    location /health {\n        proxy_pass http://localhost:5000/health;\n        access_log off;\n    }\n    \n    # WebSocket support for Socket.IO\n    location /socket.io/ {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n    }\n}\nEOF\n    \n    # Enable the site\n    sudo ln -sf /etc/nginx/sites-available/$APP_NAME /etc/nginx/sites-enabled/\n    \n    # Remove default site\n    sudo rm -f /etc/nginx/sites-enabled/default\n    \n    # Test Nginx configuration\n    sudo nginx -t\n    \n    # Reload Nginx\n    sudo systemctl reload nginx\n    \n    print_success \"Nginx reverse proxy configured for $domain\"\n}\n\n# Function to install SSL certificate with Let's Encrypt\nsetup_ssl() {\n    local domain=$1\n    \n    if [ -z \"$domain\" ]; then\n        print_warning \"No domain provided, skipping SSL setup\"\n        return\n    fi\n    \n    print_status \"Setting up SSL certificate with Let's Encrypt...\"\n    \n    # Install Certbot\n    sudo apt update\n    sudo apt install -y certbot python3-certbot-nginx\n    \n    # Obtain SSL certificate\n    sudo certbot --nginx -d $domain -d www.$domain --non-interactive --agree-tos --email admin@$domain\n    \n    # Set up automatic renewal\n    sudo systemctl enable certbot.timer\n    \n    print_success \"SSL certificate installed and auto-renewal configured\"\n}\n\n# Function to run health check\nrun_health_check() {\n    print_status \"Running health check...\"\n    \n    # Wait a moment for the application to start\n    sleep 10\n    \n    # Check if application is responding\n    if curl -f http://localhost:5000/health > /dev/null 2>&1; then\n        print_success \"Health check passed - application is running!\"\n    else\n        print_error \"Health check failed - application may not be running properly\"\n        print_status \"Checking PM2 logs...\"\n        pm2 logs $APP_NAME --lines 20\n    fi\n}\n\n# Function to display post-deployment information\nshow_deployment_info() {\n    local domain=$1\n    \n    print_success \"==============================================================================\"\n    print_success \"Deployment completed successfully!\"\n    print_success \"==============================================================================\"\n    \n    if [ -n \"$domain\" ]; then\n        print_success \"Your application is available at:\"\n        print_success \"  - https://$domain\"\n        print_success \"  - https://www.$domain\"\n    else\n        local public_ip=$(curl -s http://checkip.amazonaws.com)\n        print_success \"Your application is available at:\"\n        print_success \"  - http://$public_ip:5000\"\n    fi\n    \n    print_success \"\"\n    print_success \"Useful commands:\"\n    print_success \"  - Check application status: pm2 status\"\n    print_success \"  - View logs: pm2 logs $APP_NAME\"\n    print_success \"  - Restart application: pm2 restart $APP_NAME\"\n    print_success \"  - Check health: curl http://localhost:5000/health\"\n    print_success \"\"\n    print_warning \"Don't forget to:\"\n    print_warning \"  1. Update your .env file with production values\"\n    print_warning \"  2. Configure your domain's DNS to point to this server\"\n    print_warning \"  3. Set up monitoring and backups\"\n    print_success \"==============================================================================\"\n}\n\n# Main deployment function\nmain() {\n    local repo_url=$1\n    local domain=$2\n    \n    print_status \"Starting Torch Fellowship Backend deployment...\"\n    \n    # Check if running as ubuntu user\n    if [ \"$USER\" != \"ubuntu\" ]; then\n        print_error \"This script should be run as the ubuntu user\"\n        exit 1\n    fi\n    \n    # Update system\n    print_status \"Updating system packages...\"\n    sudo apt update && sudo apt upgrade -y\n    \n    # Install dependencies if not present\n    if ! command_exists node; then\n        install_nodejs\n    fi\n    \n    if ! command_exists pm2; then\n        install_pm2\n    fi\n    \n    if ! command_exists nginx; then\n        install_nginx\n    fi\n    \n    # Configure firewall\n    configure_firewall\n    \n    # Setup application\n    setup_app_directory\n    \n    if [ -n \"$repo_url\" ]; then\n        clone_repository $repo_url\n    else\n        print_error \"Repository URL not provided\"\n        print_status \"Usage: $0 <repository_url> [domain]\"\n        exit 1\n    fi\n    \n    install_dependencies\n    setup_environment\n    setup_logs\n    \n    # Configure Nginx if domain provided\n    if [ -n \"$domain\" ]; then\n        configure_nginx_proxy $domain\n        setup_ssl $domain\n    fi\n    \n    start_application\n    run_health_check\n    \n    show_deployment_info $domain\n}\n\n# Run main function with all arguments\nmain \"$@\"