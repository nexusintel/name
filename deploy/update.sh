#!/bin/bash

# =============================================================================\n# Torch Fellowship Backend - Update Script\n# =============================================================================\n#\n# This script updates the Torch Fellowship backend application\n# with minimal downtime.\n#\n# Supports both PM2 and Docker deployments\n#\n# =============================================================================\n\nset -e  # Exit on any error\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Configuration\nAPP_NAME=\"torch-fellowship-backend\"\nAPP_DIR=\"/home/ubuntu/$APP_NAME\"\nCONTAINER_NAME=\"torch-fellowship-backend\"\nIMAGE_NAME=\"torch-fellowship:latest\"\nBACKUP_DIR=\"/home/ubuntu/backups\"\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Function to check if command exists\ncommand_exists() {\n    command -v \"$1\" >/dev/null 2>&1\n}\n\n# Function to create backup\ncreate_backup() {\n    print_status \"Creating backup...\"\n    \n    # Create backup directory\n    mkdir -p $BACKUP_DIR\n    \n    # Create timestamp\n    local timestamp=$(date +\"%Y%m%d_%H%M%S\")\n    local backup_name=\"${APP_NAME}_backup_${timestamp}\"\n    \n    # Create backup\n    cp -r $APP_DIR \"$BACKUP_DIR/$backup_name\"\n    \n    # Keep only last 5 backups\n    cd $BACKUP_DIR\n    ls -t | grep \"${APP_NAME}_backup_\" | tail -n +6 | xargs -r rm -rf\n    \n    print_success \"Backup created: $BACKUP_DIR/$backup_name\"\n}\n\n# Function to detect deployment type\ndetect_deployment_type() {\n    if command_exists pm2 && pm2 show $APP_NAME > /dev/null 2>&1; then\n        echo \"pm2\"\n    elif command_exists docker && [ -f \"$APP_DIR/docker-compose.yml\" ]; then\n        echo \"docker-compose\"\n    elif command_exists docker && docker ps -q -f name=$CONTAINER_NAME | grep -q .; then\n        echo \"docker\"\n    else\n        echo \"unknown\"\n    fi\n}\n\n# Function to update with PM2\nupdate_pm2() {\n    print_status \"Updating PM2 deployment...\"\n    \n    cd $APP_DIR\n    \n    # Pull latest changes\n    git pull origin main\n    \n    # Install/update dependencies\n    npm ci --production\n    \n    # Reload application with zero downtime\n    pm2 reload $APP_NAME\n    \n    # Wait a moment\n    sleep 5\n    \n    # Check status\n    pm2 status $APP_NAME\n    \n    print_success \"PM2 deployment updated successfully\"\n}\n\n# Function to update with Docker Compose\nupdate_docker_compose() {\n    print_status \"Updating Docker Compose deployment...\"\n    \n    cd $APP_DIR\n    \n    # Pull latest changes\n    git pull origin main\n    \n    # Rebuild and restart with minimal downtime\n    docker-compose up -d --build\n    \n    # Wait a moment\n    sleep 10\n    \n    # Check status\n    docker-compose ps\n    \n    print_success \"Docker Compose deployment updated successfully\"\n}\n\n# Function to update with Docker\nupdate_docker() {\n    print_status \"Updating Docker deployment...\"\n    \n    cd $APP_DIR\n    \n    # Pull latest changes\n    git pull origin main\n    \n    # Build new image\n    docker build -t $IMAGE_NAME .\n    \n    # Stop existing container\n    docker stop $CONTAINER_NAME\n    docker rm $CONTAINER_NAME\n    \n    # Start new container\n    docker run -d \\\n        --name $CONTAINER_NAME \\\n        --restart unless-stopped \\\n        -p 5000:5000 \\\n        --env-file .env \\\n        -v \"$APP_DIR/logs:/app/logs\" \\\n        $IMAGE_NAME\n    \n    # Wait a moment\n    sleep 10\n    \n    # Check status\n    docker ps\n    \n    print_success \"Docker deployment updated successfully\"\n}\n\n# Function to run health check\nrun_health_check() {\n    print_status \"Running health check...\"\n    \n    local max_attempts=12\n    local attempt=1\n    \n    while [ $attempt -le $max_attempts ]; do\n        if curl -f http://localhost:5000/health > /dev/null 2>&1; then\n            print_success \"Health check passed - application is running!\"\n            return 0\n        else\n            print_warning \"Health check attempt $attempt/$max_attempts failed, retrying...\"\n            sleep 5\n            ((attempt++))\n        fi\n    done\n    \n    print_error \"Health check failed after $max_attempts attempts\"\n    return 1\n}\n\n# Function to rollback if health check fails\nrollback() {\n    print_error \"Health check failed, initiating rollback...\"\n    \n    local latest_backup=$(ls -t $BACKUP_DIR | grep \"${APP_NAME}_backup_\" | head -n 1)\n    \n    if [ -z \"$latest_backup\" ]; then\n        print_error \"No backup found for rollback!\"\n        exit 1\n    fi\n    \n    print_status \"Rolling back to: $latest_backup\"\n    \n    # Stop current application\n    local deployment_type=$(detect_deployment_type)\n    case $deployment_type in\n        \"pm2\")\n            pm2 stop $APP_NAME\n            ;;\n        \"docker-compose\")\n            cd $APP_DIR\n            docker-compose down\n            ;;\n        \"docker\")\n            docker stop $CONTAINER_NAME\n            docker rm $CONTAINER_NAME\n            ;;\n    esac\n    \n    # Restore backup\n    rm -rf $APP_DIR\n    cp -r \"$BACKUP_DIR/$latest_backup\" $APP_DIR\n    cd $APP_DIR\n    \n    # Restart application\n    case $deployment_type in\n        \"pm2\")\n            pm2 start ecosystem.config.js --env production\n            ;;\n        \"docker-compose\")\n            docker-compose up -d\n            ;;\n        \"docker\")\n            docker run -d \\\n                --name $CONTAINER_NAME \\\n                --restart unless-stopped \\\n                -p 5000:5000 \\\n                --env-file .env \\\n                -v \"$APP_DIR/logs:/app/logs\" \\\n                $IMAGE_NAME\n            ;;\n    esac\n    \n    print_success \"Rollback completed\"\n}\n\n# Function to show current version info\nshow_version_info() {\n    print_status \"Current deployment information:\"\n    \n    cd $APP_DIR\n    \n    # Git information\n    if [ -d \".git\" ]; then\n        local git_branch=$(git branch --show-current)\n        local git_commit=$(git rev-parse --short HEAD)\n        local git_date=$(git log -1 --format=%cd --date=short)\n        \n        print_status \"Git branch: $git_branch\"\n        print_status \"Git commit: $git_commit\"\n        print_status \"Last commit date: $git_date\"\n    fi\n    \n    # Deployment type\n    local deployment_type=$(detect_deployment_type)\n    print_status \"Deployment type: $deployment_type\"\n    \n    # Application status\n    case $deployment_type in\n        \"pm2\")\n            pm2 status $APP_NAME\n            ;;\n        \"docker-compose\")\n            docker-compose ps\n            ;;\n        \"docker\")\n            docker ps -f name=$CONTAINER_NAME\n            ;;\n    esac\n}\n\n# Function to display logs\nshow_logs() {\n    local lines=${1:-50}\n    \n    print_status \"Showing last $lines lines of logs...\"\n    \n    local deployment_type=$(detect_deployment_type)\n    \n    case $deployment_type in\n        \"pm2\")\n            pm2 logs $APP_NAME --lines $lines\n            ;;\n        \"docker-compose\")\n            cd $APP_DIR\n            docker-compose logs --tail=$lines\n            ;;\n        \"docker\")\n            docker logs --tail=$lines $CONTAINER_NAME\n            ;;\n        *)\n            print_error \"Unknown deployment type, checking log files...\"\n            if [ -d \"$APP_DIR/logs\" ]; then\n                tail -n $lines $APP_DIR/logs/combined.log\n            fi\n            ;;\n    esac\n}\n\n# Main function\nmain() {\n    local action=${1:-\"update\"}\n    local lines=${2:-50}\n    \n    case $action in\n        \"update\")\n            print_status \"Starting update process...\"\n            \n            # Check if app directory exists\n            if [ ! -d \"$APP_DIR\" ]; then\n                print_error \"Application directory not found: $APP_DIR\"\n                exit 1\n            fi\n            \n            # Create backup\n            create_backup\n            \n            # Detect deployment type and update\n            local deployment_type=$(detect_deployment_type)\n            print_status \"Detected deployment type: $deployment_type\"\n            \n            case $deployment_type in\n                \"pm2\")\n                    update_pm2\n                    ;;\n                \"docker-compose\")\n                    update_docker_compose\n                    ;;\n                \"docker\")\n                    update_docker\n                    ;;\n                *)\n                    print_error \"Unknown deployment type. Please check your deployment.\"\n                    exit 1\n                    ;;\n            esac\n            \n            # Run health check\n            if ! run_health_check; then\n                rollback\n                exit 1\n            fi\n            \n            print_success \"Update completed successfully!\"\n            ;;\n        \"status\")\n            show_version_info\n            ;;\n        \"logs\")\n            show_logs $lines\n            ;;\n        \"rollback\")\n            rollback\n            ;;\n        \"help\")\n            echo \"Usage: $0 [action] [options]\"\n            echo \"\"\n            echo \"Actions:\"\n            echo \"  update   - Update the application (default)\"\n            echo \"  status   - Show current deployment status\"\n            echo \"  logs     - Show application logs (default: 50 lines)\"\n            echo \"  rollback - Rollback to previous version\"\n            echo \"  help     - Show this help message\"\n            echo \"\"\n            echo \"Examples:\"\n            echo \"  $0                    # Update application\"\n            echo \"  $0 status            # Show status\"\n            echo \"  $0 logs              # Show last 50 lines\"\n            echo \"  $0 logs 100          # Show last 100 lines\"\n            echo \"  $0 rollback          # Rollback to previous version\"\n            ;;\n        *)\n            print_error \"Unknown action: $action\"\n            print_status \"Use '$0 help' for usage information\"\n            exit 1\n            ;;\n    esac\n}\n\n# Run main function with all arguments\nmain \"$@\"